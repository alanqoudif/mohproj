generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role          @default(USER)
  accounts       Account[]
  sessions       Session[]
  consultations  Consultation[]
  messages       Message[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Consultant {
  id            String         @id @default(cuid())
  userId        String         @unique
  specialtyId   String
  specialty     Specialty      @relation(fields: [specialtyId], references: [id])
  bio           String
  experience    Int
  rating        Float         @default(0)
  consultations Consultation[]
  messages      Message[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Specialty {
  id          String        @id @default(cuid())
  name        String       @unique
  description String
  consultants Consultant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Consultation {
  id           String      @id @default(cuid())
  userId       String
  consultantId String
  status       Status      @default(PENDING)
  isAnonymous  Boolean     @default(false)
  messages     Message[]
  user         User        @relation(fields: [userId], references: [id])
  consultant   Consultant  @relation(fields: [consultantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Message {
  id             String        @id @default(cuid())
  content        String
  consultationId String
  senderId       String
  senderType     SenderType
  consultation   Consultation  @relation(fields: [consultationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
  consultant     Consultant?   @relation(fields: [consultantId], references: [id])
  userId         String?
  consultantId   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum Role {
  USER
  CONSULTANT
  ADMIN
}

enum Status {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SenderType {
  USER
  CONSULTANT
  SYSTEM
}